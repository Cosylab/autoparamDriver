record(longin, "$(PREFIX):random") {
    field(DESC, "Read a random integer")
    field(DTYP, "asynInt32")
    field(INP, "@asyn($(PORT)) RANDOM")
}

record(longin, "$(PREFIX):random_1") {
    field(SCAN, "I/O Intr")
    field(DESC, "Contains same number as random_2")
    field(DTYP, "asynInt32")
    field(INP, "@asyn($(PORT)) RANDOM")
}

record(longin, "$(PREFIX):random_2") {
    field(SCAN, "I/O Intr")
    field(DESC, "Contains same number as random_1")
    field(DTYP, "asynInt32")
    field(INP, "@asyn($(PORT)) RANDOM")
}

record(longin, "$(PREFIX):sum_rb") {
    field(DESC, "Read the summed value")
    field(DTYP, "asynInt32")
    field(INP, "@asyn($(PORT)) SUM")
}

record(longout, "$(PREFIX):sum_set") {
    field(DESC, "(Re)set the summed value")
    field(DTYP, "asynInt32")
    field(OUT, "@asyn($(PORT)) SUM set")
}

record(longout, "$(PREFIX):sum_add") {
    field(DESC, "Add 11 to the summed value")
    field(DTYP, "asynInt32")
    field(OUT, "@asyn($(PORT)) SUM 3 4 4")
}

record(ai, "$(PREFIX):error_read") {
    field(DESC, "Test read error")
    field(DTYP, "asynFloat64")
    field(INP, "@asyn($(PORT)) ERROR error")
}

record(ai, "$(PREFIX):error_timeout") {
    field(DESC, "Test timeout error")
    field(DTYP, "asynFloat64")
    field(INP, "@asyn($(PORT)) ERROR timeout")
}

record(ai, "$(PREFIX):error_custom") {
    field(DESC, "Test custom error")
    field(DTYP, "asynFloat64")
    field(INP, "@asyn($(PORT)) ERROR hwlimit")
}

record(ai, "$(PREFIX):error_soft") {
    field(DESC, "Test soft error")
    field(DTYP, "asynFloat64")
    field(INP, "@asyn($(PORT)) ERROR garbage")
}

record(waveform, "$(PREFIX):waveform_sp") {
    field(DESC, "Set the value of a waveform")
    field(FTVL, "CHAR")
    field(NELM, 10)  # The driver enforces 8
    field(DTYP, "asynInt8ArrayOut")
    field(INP, "@asyn($(PORT)) WFM8")
}

record(waveform, "$(PREFIX):waveform_rb") {
    field(DESC, "Read the value of a waveform")
    field(FTVL, "CHAR")
    field(NELM, 10)  # The driver enforces 8
    field(DTYP, "asynInt8ArrayIn")
    field(INP, "@asyn($(PORT)) WFM8")
}

record(waveform, "$(PREFIX):waveform_rb2") {
    field(DESC, "Get notified of the value of a waveform")
    field(SCAN, "I/O Intr")
    field(FTVL, "CHAR")
    field(NELM, 10)  # The driver enforces 8
    field(DTYP, "asynInt8ArrayIn")
    field(INP, "@asyn($(PORT)) WFM8")
}

record(longout, "$(PREFIX):default_handler_sp") {
    field(DESC, "Test default write handler")
    field(DTYP, "asynInt32")
    field(OUT, "@asyn($(PORT)) DEFHANDLER")
}

record(longin, "$(PREFIX):default_handler_rb") {
    field(DESC, "Test default read handler")
    field(DTYP, "asynInt32")
    field(INP, "@asyn($(PORT)) DEFHANDLER")
}

record(longout, "$(PREFIX):bits_sp") {
    field(DESC, "Setting of shifted register")
    field(DTYP, "asynUInt32Digital")
    field(OUT, "@asynMask($(PORT), 0, 0xFFFFFFFF) DIGIO")
}

record(longin, "$(PREFIX):bits_rb") {
    field(DESC, "Numeric value of shifted register")
    field(DTYP, "asynUInt32Digital")
    field(INP, "@asynMask($(PORT), 0, 0xFFFFFFFF) DIGIO")
}

record(bi, "$(PREFIX):bits_b3") {
    field(DESC, "A single bit")
    field(DTYP, "asynUInt32Digital")
    field(INP, "@asynMask($(PORT), 0, 0x8) DIGIO")
    field(ZNAM, "Down")
    field(ONAM, "Up")
}

record(bi, "$(PREFIX):bits_b4") {
    field(DESC, "A single bit")
    field(DTYP, "asynUInt32Digital")
    field(INP, "@asynMask($(PORT), 0, 0x16) DIGIO")
    field(ZNAM, "Down")
    field(ONAM, "Up")
}

record(stringin, "$(PREFIX):arg_echo") {
    field(DESC, "Show the argument string")
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn($(PORT)) ARGECHO ena dva tri")
}

record(stringout, "$(PREFIX):print") {
    field(DESC, "Print a string to ioc stdout")
    field(DTYP, "asynOctetWrite")
    field(OUT, "@asyn($(PORT)) PRINT")
}
